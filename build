#!/bin/zsh -x

# This code was once commented, but got lost from a call to `ln` in the wrong
# directory. This version has been pieced together from one shity log.

sudo -v || exit $?
while true; do
    sudo -nv
    sleep 1m
    kill -0 $$ 2>/dev/null || exit
done &

local SHOULD_RESUME=false
local RESUME_PKG=
local PACKAGES=()
local EXCLUDED_PACKAGES=()
local FIRST_PARAMS=()
local EVERY_PARAMS=()
local ONE_ONLY=false
local DO_BACKUP_DIR=
local RESUME_BACKUP_DIR=
local CHROOT_NAME=

source "$(pwd)/build_utils"

while [[ $# -gt 0 ]]; do
	case "$1" in
		-r)
            if [[ "$SHOULD_RESUME" != "false" ]]; then
                echo -r conflicts with either other -r or -rp 
                exit 1
            fi
            SHOULD_RESUME=true
			shift # past argument
		;;
		-rp)
            if [[ "$SHOULD_RESUME" != "false" ]]; then
                echo -rp conflicts with either other -rp or -r
                exit 1
            fi
            SHOULD_RESUME=true
            RESUME_PKG="$2"
			shift # past argument
			shift # past value
		;;
		-p)
            PACKAGES+=("$2")
			shift # past argument
			shift # past value
		;;
		-e)
            EXCLUDED_PACKAGES+=("$2")
			shift # past argument
			shift # past value
		;;
		-fp)
            FIRST_PARAMS+=("$2")
			shift # past argument
			shift # past value
		;;
		-ep)
            EVERY_PARAMS+=("$2")
			shift # past argument
			shift # past value
		;;
		-o)
            ONE_ONLY=true
			shift # past argument
		;;
		-rs)
            if [[ "$RESUME_BACKUP_DIR" != "" ]]; then
                echo Resume backup dir already passed.
                exit 1
            fi

            RESUME_BACKUP_DIR="$2"
			shift # past argument
			shift # past argument
		;;
		-bk)
            if [[ "$DO_BACKUP_DIR" != "" ]]; then
                echo Do backup dir already passed.
                exit 1
            fi

            DO_BACKUP_DIR="$2"
			shift # past argument
			shift # past argument
		;;
		-cn)
            if [[ "$CHROOT_NAME" != "" ]]; then
                echo Chroot name already passed.
                exit 1
            fi

            CHROOT_NAME="$2"
			shift # past argument
			shift # past argument
		;;

        --help)
            echo "====== HELP ======"
            echo "PARA | DESC"
            echo "-rp  : Resumes on this package"
            echo "-r   : Resumes on last built package"
            echo "-p   : Adds this to the package list"
            echo "-e   : Adds this to the excluded package list"
            echo "-fp  : Add this as one of the params that the first package built recieves"
            echo "-ep  : Add this as one of the params that every package recieves, excluding the first if -fp is set"
            echo "-o   : Only build one package"
            echo "-bk  : Do backups."
            echo "-rs  : Resume backups."
            echo "-cn  : Chroot name."
            exit
        ;;
		*) # unknown option
			printf "Unkown option \`$1\`\n"
            exit 1
		;;
	esac
done

if [[ "${#EVERY_PARAMS[@]}" == "0" ]]; then
    echo "Falling back to using -w for every package"
    EVERY_PARAMS=("-w")
fi

if [[ "${CHROOT_NAME}" == "" ]]; then
    echo "Falling back to using chroot name of \"chroot\""
    CHROOT_NAME="chroot"
fi

if [[ "${SHOULD_RESUME}" == "true" && "${RESUME_PKG}" == "" ]]; then
    echo "Falling back to using last_pkg"
    RESUME_PKG="$(cat last_pkg.${CHROOT_NAME})"
fi

if [[ "${#PACKAGES[@]}" == "0" ]]; then
    echo "Falling back to built in package list."
    PACKAGES=( 
        "xorgproto-git-gentz"

        "lib32-tk-gentz"
        "lib32-mpdecimal-gentz"
        "python2-gentz"
        "python-gentz"

        "libx11-git-gentz"

        "lib32-libedit-gentz"
        "llvm-git-gentz"

        "openmpi-git-gentz"
        "valgrind-git-gentz"

        "lib32-libomxil-bellagio-gentz"
        "libdrm-git-gentz"
        "mesa-git-gentz"

        "xorg-server-git-gentz"
        "xf86-video-amdgpu-git-gentz"
        "xf86-video-ati-git-gentz"

        "wine-staging-git-gentz"
        "winetricks-git"
    ) 
fi

# If line starts with BUILDENV and this option is "sign" add a "!".
awk '{
    if (/^ *BUILDENV *= *\( */) {
        split($0, a, "(");
        for (i in a) {
            if (i != 1) printf "("
            if (i == 2) {
                split(a[i], b, ")");
                for (j in b) if (j == 1) {
                    split(b[j], c, " ")
                    for(k in c) {
                        if (k != 1) printf " "
                        if(c[k] == "sign") printf "!"
                        printf c[k]
                    }
                } else printf ")" b[j]
            } else printf a[i]
        }
        printf "\n"
    } else print
}' /etc/makepkg.conf > makepkg.conf

for PKG_TO_BUILD in $PACKAGES; do
    if [[ ! -d "$PKG_TO_BUILD" ]]; then
        echo "Package \"$PKG_TO_BUILD\" is missing"
        exit 1
    fi

    if [[ ! -f "$PKG_TO_BUILD/build" ]]; then
        echo "Package \"$PKG_TO_BUILD\" is missing build script"
        exit 1
    fi
done

local CHROOT_DIR="$(pwd)/chroots/${CHROOT_NAME}"

if [[ "$SHOULD_RESUME" == "false" || ! -d "${CHROOT_DIR}" ]]; then
    cp "alternatives.${CHROOT_NAME}" "provides.${CHROOT_NAME}"
    touch "provides.${CHROOT_NAME}"
    sudo rm -rf "deps.${CHROOT_NAME}"
    mkdir -p "deps.${CHROOT_NAME}"
    mkdir -p "alt_pkgs.${CHROOT_NAME}"
    mkdir -p "chroots"

    rm */*.pkg.tar-namcap.log
    rm */*-build.log*
    rm */*-package*.log*
    rm */*-namcap.log*
    rm */*-prepare.log*
    rm */*-check.log*
    rm */*-pkgver.log*
    rm "last_pkg.${CHROOT_NAME}" || true

    mkdir -p "pkgs.old.${CHROOT_NAME}"
    mkdir -p "pkgs.${CHROOT_NAME}"
    mv "pkgs.${CHROOT_NAME}/"* "pkgs.old.${CHROOT_NAME}"

    sudo rm -rf "$CHROOT_DIR"
    mkdir -p "$CHROOT_DIR"

    sudo /usr/bin/mkarchroot \
        -C /etc/pacman.conf \
        -M "$(pwd)/makepkg.conf" \
        -c /var/cache/pacman/pkg \
        "$CHROOT_DIR/root" \
        base-devel ccache gcc-multilib zsh

    sudo /usr/bin/arch-nspawn "$CHROOT_DIR/root" \
        /bin/bash -c 'yes | pacman -Syyu'

    sudo mkdir -p "${CHROOT_DIR}/root/alt_pkgs.${CHROOT_NAME}/"
    sudo cp "alt_pkgs.${CHROOT_NAME}/"*.pkg* "${CHROOT_DIR}/root/pkgs/"
    local ALT_DEPS="$(sudo ls ${CHROOT_DIR}/root/alt_pkgs${CHROOT_NAME}/ \
        | sed "s/^/\/alt_pkgs.${CHROOT_NAME}\//" \
        | tr '\n' ' ')"
    if [[ "$ALT_DEPS" != "" ]]; then
        sudo /usr/bin/arch-nspawn "${CHROOT_DIR}/root" \
            /bin/bash -c "yes | pacman -U $ALT_DEPS"
    fi
else
    sudo cp makepkg.conf "${CHROOT_DIR}/root/etc/makepkg.conf"
    sudo cp makepkg.conf "${CHROOT_DIR}/${USER}/etc/makepkg.conf"
    sudo chown root:root \
        "${CHROOT_DIR}/${USER}/etc/makepkg.conf" \
        "${CHROOT_DIR}/root/etc/makepkg.conf"
    sudo chmod 644 \
        "${CHROOT_DIR}/${USER}/etc/makepkg.conf" \
        "${CHROOT_DIR}/root/etc/makepkg.conf"

    sudo /usr/bin/arch-nspawn "$CHROOT_DIR/root" \
        /bin/bash -c 'yes | pacman -Syyu'
fi

[[ "$RESUME_BACKUP_DIR" != "" ]] && mkdir -p "$RESUME_BACKUP_DIR"
[[ "$DO_BACKUP_DIR" != "" ]] && mkdir -p "$DO_BACKUP_DIR"

for PKG_TO_BUILD in $PACKAGES; do
    if [[ "$SHOULD_RESUME" != "false" ]]; then
        if [[ "$PKG_TO_BUILD" != "$RESUME_PKG" ]]; then 
            echo "Skipping $PKG_TO_BUILD"
            continue
        fi
        SHOULD_RESUME=false
    fi

    if array_contains_element $PKG_TO_BUILD ${EXCLUDED_PACKAGES[@]} ; then 
        echo "Excluding $PKG_TO_BUILD"
        continue
    fi

    echo "Doing $PKG_TO_BUILD"

    echo "$PKG_TO_BUILD" > "last_pkg.${CHROOT_NAME}"

    local PARAMS=(${EVERY_PARAMS[@]})

    if [[ "${#FIRST_PARAMS[@]}" != "0" ]]; then
        PARAMS=("${FIRST_PARAMS[@]}")
        FIRST_PARAMS=()
    fi

    array_contains_element "-rs" ${PARAMS[@]} \
        && echo "Did not insert -rs as already present" \
        || {
            [[ "$RESUME_BACKUP_DIR" != "" ]] \
                && PARAMS+=("-rs" "$RESUME_BACKUP_DIR/$PKG_TO_BUILD")
        }

    if array_contains_element "-rs" ${PARAMS[@]} ; then 
        # Strip -w, as that conflicts
        TO_REMOVE=("-w")
        remove_from_array PARAMS TO_REMOVE
        PARAMS=("${RFA_RETURN[@]}")
    fi

    array_contains_element "-bk" ${PARAMS[@]} \
        && echo "Did not insert -bk as already present" \
        || {
            [[ "$DO_BACKUP_DIR" != "" ]] \
                && PARAMS+=("-bk" "$DO_BACKUP_DIR/$PKG_TO_BUILD")
        }

    cd "$PKG_TO_BUILD"
    ./build "${PARAMS[@]}" -c "$CHROOT_DIR" -cn "$CHROOT_NAME" || {
        echo "Failed to build $PKG_TO_BUILD"
        exit 1
    }

    cd ..
    echo "Done $PKG_TO_BUILD"

    if [[ "$ONE_ONLY" == "true" ]]; then
        exit
    fi
done
